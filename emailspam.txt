import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report,confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
# Load the dataset
# Make sure the dataset is available in the correct path
emails_df = pd.read_csv('emails.csv')




X = emails_df.drop(columns=['Email No.', 'Prediction']) # Drop unnecessary‚ê£columns
y = emails_df['Prediction']



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
random_state=42)



scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)



knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)


y_pred_knn = knn.predict(X_test)


svm = SVC(kernel='linear')
svm.fit(X_train, y_train)



y_pred_svm = svm.predict(X_test)


def evaluate_model(y_test, y_pred, model_name):
      print(f"Performance of {model_name}:\n")
      print("Accuracy:", accuracy_score(y_test, y_pred))
      print("Classification Report:\n", classification_report(y_test, y_pred))
      print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
# Plot confusion matrix
      cm = confusion_matrix(y_test, y_pred)
      plt.figure(figsize=(5, 4))
      sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Spam',
      'Spam'], yticklabels=['Not Spam', 'Spam'])
      plt.title(f"Confusion Matrix for {model_name}")
      plt.ylabel('True label')
      plt.xlabel('Predicted label')
      plt.show()



evaluate_model(y_test, y_pred_knn, "K-Nearest Neighbors")

evaluate_model(y_test, y_pred_svm, "Support Vector Machine")





print("K-Nearest Neighbors Accuracy:", accuracy_score(y_test, y_pred_knn))
print("Support Vector Machine Accuracy:", accuracy_score(y_test, y_pred_svm))





